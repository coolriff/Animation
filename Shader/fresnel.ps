#version 430

in vec3 eyePos;
in vec3 eyeNormal;

uniform samplerCube CubeMapTex;
uniform mat4 view;

uniform float ratioR;
uniform float ratioG;
uniform float ratioB;
uniform float reflectFactor;
out vec4 FragColor;

void main () 
{
	float F = ((1.0 - ratioG) * (1.0 - ratioG)) / ((1.0 + ratioG) * (1.0 + ratioG)); 
	vec3 eyeIncident = normalize(eyePos);
	vec3 normal = normalize(eyeNormal);

    vec3 refractedVecR = refract(eyeIncident, normal, ratioR);
	refractedVecR = vec3(inverse(view) * vec4(refractedVecR, 0.0));
	vec3 refractedVecG = refract(eyeIncident, normal, ratioG);
	refractedVecG = vec3(inverse(view) * vec4(refractedVecG, 0.0));
	vec3 refractedVecB = refract(eyeIncident, normal, ratioB);
	refractedVecB = vec3(inverse(view) * vec4(refractedVecB, 0.0));

	vec3 FinalRefractColor;

	FinalRefractColor.r = vec3(texture(CubeMapTex, refractedVecR)).r;
	FinalRefractColor.g = vec3(texture(CubeMapTex, refractedVecG)).g;
	FinalRefractColor.b = vec3(texture(CubeMapTex, refractedVecB)).b;

	float Ratio = F + (1.0 - F) * pow((1.0 - dot(-eyeIncident, normal)), 5);

	vec3 reflected = reflect(eyeIncident, normal);
	reflected = vec3 (inverse(view) * vec4 (reflected, 0.0));
    vec3 FinalReflectColor = texture(CubeMapTex, reflected).xyz;

    vec3 color = mix(FinalRefractColor, FinalReflectColor, Ratio);
	FragColor = vec4(color,1.0);
}
