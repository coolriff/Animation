#version 430

uniform vec3 ambientColor;
uniform vec3 specularColor;
uniform vec3 diffuseColor;
uniform vec3 vLightDir;

uniform float ambientIntensity;
uniform float specularIntensity;
uniform float diffuseIntensity;
uniform float specularShininess;

in vec3 eyePos;
in vec3 eyeNormal;
in mat3 tbnMatrix;

in vec2 pTexCoord;

uniform sampler2D gSampler;
uniform sampler2D nSampler;
uniform mat4 view;

out vec4 FragColor;

void main()
{
	vec3 normal = normalize(tbnMatrix * (255.0/128.0 * texture2D(nSampler, pTexCoord).xyz - 1));
	vec4 color = texture(gSampler,pTexCoord);

    vec4 ambientC = vec4(ambientColor, 1.0f) * ambientIntensity;
	vec4 diffuseC = vec4(diffuseColor, 1.0f) * diffuseIntensity * max(0.0, dot(normalize(normal), -vLightDir));	

	vec3 surfaceToCamera = normalize (eyePos);
	vec3 reflectionToCamera = reflect (-vLightDir, normal);
	float dotSpecular = dot(reflectionToCamera, surfaceToCamera);
	dotSpecular = max (dotSpecular, 0.0);
	float specularFactor = pow (dotSpecular, specularShininess);

	vec4 specularC = vec4(specularColor, 1.0f) * specularIntensity * specularFactor;

	FragColor = color * (diffuseC + ambientC + specularC);
};


